#!/usr/bin/python env

"""
File inputs and outputs.
"""

import numpy as np


def write_lammps_structure(cell:tuple,
                           filename:str):
    """
    Write lammps structure.

    Args:
        cell: (lattice, frac_coords, symbols).
        filename: Output filename.
    """
    from lammpkits.interfaces.pymatgen import get_pymatgen_structure
    from pymatgen.io.lammps.data import LammpsData

    pmgstruct = get_pymatgen_structure(cell=cell)
    lmp_data = LammpsData.from_structure(pmgstruct, atom_style='atomic')
    lmp_data.write_file(filename=filename)


def write_poscar(
        cell:tuple,
        filename:str='POSCAR'):
    """
    Write out structure to file.
    In this function, structure is not fixed
    even if its lattice basis is left handed.

    Args:
        cell: (lattice, scaled_positions, symbols).
        filename: Poscar filename.
    """
    lattice, scaled_positions, symbols = cell
    symbol_sets = list(set(symbols))
    nums = []
    idx = []
    for symbol in symbol_sets:
        index = [ i for i, s in enumerate(symbols) if s == symbol ]
        nums.append(str(len(index)))
        idx.extend(index)
    positions = np.round(np.array(scaled_positions)[idx, :],
                         decimals=9).astype(str)

    # create strings
    strings = ''
    strings += 'generated by lammpkits\n'
    strings += '1.0\n'
    for i in range(3):
        strings += ' '.join(list(np.round(
            lattice[i], decimals=9).astype(str))) + '\n'
    strings += ' '.join(symbol_sets) + '\n'
    strings += ' '.join(nums) + '\n'
    strings += 'Direct\n'
    for position in positions:
        strings += ' '.join(list(position)) + '\n'
    print("export filename:")
    print("    %s" % filename)

    with open(filename, 'w') as f:
        f.write(strings)
